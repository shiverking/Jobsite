<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project.dao.UserMapper">
    <resultMap id="UserResultMap" type="project.model.User">
        <result column="id" property="id"/>
        <result column="telephone" property="telephone"/>
        <result column="email" property="email"/>
        <result column="location" property="location"/>
        <result column="headurl" property="headurl"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
    </resultMap>
    <insert id="insertUser">
        insert into user (id,username, password, telephone, email,headurl) values (
        #{id},#{username},#{password},#{telephone},#{email},#{headurl}
        );
    </insert>
    <update id="updatePasswordByEmail" parameterType="project.model.User">
        update user
            <set>
                password = #{password}
            </set>
        where email = #{email};
    </update>
    <update id="changePassWordById">
        update user
        <set>
            password = #{password}
        </set>
        where id=#{id};
    </update>
    <update id="setEmailById">
        update user
        <set>
           email = #{email}
        </set>
        where id=#{id};
    </update>
    <update id="updateHeadUrlById">
        update user
        <set>
            headurl = #{headurl}
        </set>
        where id = #{id}
    </update>
    <update id="updateLocationById">
        update user
        <set>
            location = #{location}
        </set>
        where id = #{id}
    </update>

    <update id="changePasswordByUsername">
        update user
        <set>
            password = #{password}
        </set>
        where username = #{username}
    </update>

    <select id="findUserByUsername" resultMap="UserResultMap" parameterType="String">
        select * from user where username = #{username}
    </select>

    <select id="findUserByTelephone" resultType="project.model.User">
        <if test="telephone!= null " >
        select * from user where telephone = #{telephone}
        </if>
    </select>

    <select id="getAllUsers" resultType="project.model.User">
        select * from user
    </select>

    <delete id="deleteUserByUsername" parameterType="project.model.User">
        delete from user where username=#{username}
    </delete>
  
    <!--查询邮箱是否存在，前提必须是邮箱已存在且唯一且已被绑定-->
    <select id="isEmailExist" resultType="java.lang.Boolean">
        <![CDATA[ select count(id)
        from user where email = #{email}]]>
    </select>

    <select id="isUsernameExist" resultType="java.lang.Boolean">
        <![CDATA[ select count(id)
        from user where username = #{username}]]>
    </select>

    <select id="isTelephoneExist" resultType="java.lang.Boolean">
        <![CDATA[ select count(id)
        from user where telephone = #{telephone}]]>
    </select>

    <select id="findPasswordByEmail" resultType="java.lang.String">
        select password from user where email = #{email}
    </select>
    <select id="getLastId" resultType="java.lang.Integer">
        select max(id) from user;
    </select>
    <select id="loadUserByUsername" resultType="project.model.User">
         select * from user where username=#{username}
    </select>
    <select id="getUserRolesByUid" resultType="project.model.Role">
        select * from role r,user_role ur where r.id=ur.rid and ur.uid=#{id}
    </select>
    <select id="findPasswordById" resultType="java.lang.String">
        select password from user where id=#{id}
    </select>

    <select id="getEmailById" resultType="java.lang.String">
        select email from user where id=#{id}
    </select>

    <select id="findUserById" resultType="project.model.User">
        select * from user where id = #{id}
    </select>
        
    <select id="getUserByRid" resultType="project.model.User">
        select * from user u,user_role ur where u.id=ur.uid and ur.rid=#{rid}
    </select>
        
    <select id="getUsernameById" resultType="java.lang.String">
        select username from user where id=#{id}
    </select>

    <select id="getIdByUserName" resultType="java.lang.Integer">
        select id from user where username=#{username}
    </select>

    <select id="getHeadurlById" resultType="java.lang.String">
        select headurl from user where id=#{id}
    </select>

    <select id="getLocationById" resultType="java.lang.String">
        select locaion from user where id=#{id}
    </select>

    <select id="getUserById" resultType="project.model.User">
        select * from user where id=#{id}
    </select>

    <delete id="deleteUserById" parameterType="project.model.User">
        delete from user where id = #{id}
    </delete>

    <select id="getUserList" resultType="project.model.User">
        select u.id,username,telephone,email,location from user u,user_role ur where u.id=ur.uid and ur.rid=1 or ur.rid=2
    </select>

    <select id="getAdminList" resultType="project.model.User">
        select u.id,username,telephone,email,location from user u,user_role ur where u.id=ur.uid and ur.rid=3
    </select>

    <select id="searchUser" resultType="project.model.User">
        select * from user u,user_role ur
        <where>
            1=1
            and u.id = ur.uid
            <if test="username!=null and username!=''">and u.username=#{username}</if>
            <if test="telephone!=null and telephone != ''">and u.telephone=#{telephone}</if>
            <if test="rid!=null and rid!=0">and ur.rid=#{rid}</if>
        </where>
    </select>

    <select id="getUserCount" resultType="int">
        select count(*) from user
    </select>

    <update id="updateUserInfo" >
        update user
        <set>
            username = #{username},
            email = #{email},
            password = #{password}
        </set>
        where id=#{id};
    </update>

</mapper>
